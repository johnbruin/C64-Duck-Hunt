#importonce

.macro irq_enter()
{
    pha
    txa
    pha
    tya
    pha
}

.macro irq_init()
{
    lda #$35                // no basic, no kernal
    sta $01

    lda #$7f
    sta $dc0d               //disable timer interrupts which can be generated by the two CIA chips
    sta $dd0d               //the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better
                            //stop it.
    lda $dc0d               //by reading this two registers we negate any pending CIA irqs.
    lda $dd0d               //if we don't do this, a pending CIA irq might occur after we finish setting up our irq.
                            //we don't want that to happen.
    
    lda #$01                //this is how to tell the VICII to generate a raster interrupt
    sta $d01a
}

.macro irq_setup(irq_vector, rasterline) 
{
    ldx #>irq_vector
    ldy #<irq_vector
    stx $ffff
    sty $fffe
    lda #rasterline
    sta $d012

    .if (rasterline > 255) {
		// bit 7 of $d011 is RST8
		lda $d011
		ora #$80
		sta $d011
	}
	else {
		lda $d011
		and #$7f
		sta $d011
	}
}

.macro irq_next(irq_vector, rasterline) 
{
    :irq_setup(irq_vector, rasterline)    
    lda #$ff   //this is the orthodox and safe way of clearing the interrupt condition of the VICII.
    sta $d019 
    :irq_exit()
}

.macro irq_exit() 
{
    pla
    tay
    pla
    tax
    pla
    rti
}